-- return {
-- 	"neovim/nvim-lspconfig",
-- 	event = {
-- 		"BufReadPre",
-- 		"BufNewFile",
-- 	},
-- 	dependencies = {
-- 		"hrsh7th/cmp-nvim-lsp",
-- 		"antosha417/nvim-lsp-file-operations",
-- 		"folke/lazydev.nvim",
-- 	},
-- 	config = function()
-- 		local lspconfig = require("lspconfig")
-- 		local mason_lspconfig = require("mason-lspconfig")
-- 		local cmp_nvim_lsp = require("cmp_nvim_lsp")
--
-- 		local keymap = vim.keymap
--
-- 		vim.api.nvim_create_autocmd("LspAttach", {
-- 			group = vim.api.nvim_create_augroup("UserLspConfug", {}),
-- 			callback = function(ev)
-- 				-- Buffer local mappings.
-- 				-- See `:help vim.lsp.*` for documentation on any of the below functions
-- 				local opts = { buffer = ev.buf, silent = true }
--
-- 				-- set keybinds
-- 				opts.desc = "Show LSP references"
-- 				keymap.set("n", "gR", "<cmd>Telescope lsp_references<CR>", opts) -- show definition, references
--
-- 				opts.desc = "Go to declaration"
-- 				keymap.set("n", "gD", vim.lsp.buf.declaration, opts) -- go to declaration
--
-- 				opts.desc = "Show LSP definitions"
-- 				keymap.set("n", "gd", "<cmd>Telescope lsp_definitions<CR>", opts) -- show lsp definitions
--
-- 				opts.desc = "Show LSP implementations"
-- 				keymap.set("n", "gi", "<cmd>Telescope lsp_implementations<CR>", opts) -- show lsp implementations
--
-- 				opts.desc = "Show LSP type definitions"
-- 				keymap.set("n", "gt", "<cmd>Telescope lsp_type_definitions<CR>", opts) -- show lsp type definitions
--
-- 				opts.desc = "See available code actions"
-- 				keymap.set({ "n", "v" }, "<leader>ca", vim.lsp.buf.code_action, opts) -- see available code actions, in visual mode will apply to selection
--
-- 				opts.desc = "Smart rename"
-- 				keymap.set("n", "<leader>rn", vim.lsp.buf.rename, opts) -- smart rename
--
-- 				opts.desc = "Show buffer diagnostics"
-- 				keymap.set("n", "<leader>D", "<cmd>Telescope diagnostics bufnr=0<CR>", opts) -- show  diagnostics for file
--
-- 				opts.desc = "Show line diagnostics"
-- 				keymap.set("n", "<leader>d", vim.diagnostic.open_float, opts) -- show diagnostics for line
--
-- 				opts.desc = "Go to previous diagnostic"
-- 				keymap.set("n", "[d", vim.diagnostic.goto_prev, opts) -- jump to previous diagnostic in buffer
--
-- 				opts.desc = "Go to next diagnostic"
-- 				keymap.set("n", "]d", vim.diagnostic.goto_next, opts) -- jump to next diagnostic in buffer
--
-- 				opts.desc = "Show documentation for what is under cursor"
-- 				keymap.set("n", "K", vim.lsp.buf.hover, opts) -- show documentation for what is under cursor
--
-- 				opts.desc = "Restart LSP"
-- 				keymap.set("n", "<leader>rs", ":LspRestart<CR>", opts) -- mapping to restart lsp if necessary
-- 			end,
-- 		})
--
-- 		-- used to enable autocompletion (assign to every lsp server config)
-- 		local capabilities = cmp_nvim_lsp.default_capabilities()
--
-- 		-- Change the Diagnostic symbols in the sign column (gutter)
-- 		local signs = { Error = " ", Warn = " ", Hint = "󰠠 ", Info = " " }
-- 		for type, icon in pairs(signs) do
-- 			local hl = "DiagnosticSign" .. type
-- 			vim.fn.sign_define(hl, { text = icon, texthl = hl, numhl = "" })
-- 		end
--
-- 		mason_lspconfig.setup({
-- 			handlers = {
-- 				-- default handler
-- 				function(server_name)
-- 					lspconfig[server_name].setup({
-- 						capabilities = capabilities,
-- 					})
-- 				end,
--
-- 				["emmet_ls"] = function()
-- 					lspconfig["emmet_ls"].setup({
-- 						capabilities = capabilities,
-- 						filetypes = {
-- 							"html",
-- 							"typescriptreact",
-- 							"javascriptreact",
-- 							"css",
-- 							"sass",
-- 							"scss",
-- 							"less",
-- 							"svelte",
-- 						},
-- 					})
-- 				end,
-- 				["vue_ls"] = function()
-- 					lspconfig["vue_ls"].setup({
-- 						init_options = {
-- 							vue = {
-- 								hybridMode = false,
-- 							},
-- 						},
-- 						settings = {
-- 							typescript = {
-- 								inlayHints = {
-- 									enumMemberValues = {
-- 										enabled = true,
-- 									},
-- 									functionLikeReturnTypes = {
-- 										enabled = true,
-- 									},
-- 									propertyDeclarationTypes = {
-- 										enabled = true,
-- 									},
-- 									parameterTypes = {
-- 										enabled = true,
-- 										suppressWhenArgumentMatchesName = true,
-- 									},
-- 									variableTypes = {
-- 										enabled = true,
-- 									},
-- 								},
-- 							},
-- 						},
-- 					})
-- 				end,
-- 				["ts_ls"] = function()
-- 					lspconfig["ts_ls"].setup({
-- 						-- init_options = {
-- 						-- 	plugins = {
-- 						-- 		{
-- 						-- 			name = "@vue/typescript-plugin",
-- 						-- 			location = vim.fn.stdpath("data")
-- 						-- 				.. "/mason/packages/vue-language-server/node_modules/@vue/language-server",
-- 						-- 			languages = { "vue" },
-- 						-- 		},
-- 						-- 	},
-- 						-- },
-- 						filetypes = {
-- 							"javascript",
-- 							"typescript",
-- 							-- "vue",
-- 						},
-- 						settings = {
-- 							typescript = {
-- 								tsserver = {
-- 									useSyntaxServer = false,
-- 								},
-- 								inlayHints = {
-- 									includeInlayParameterNameHints = "all",
-- 									includeInlayParameterNameHintsWhenArgumentMatchesName = true,
-- 									includeInlayFunctionParameterTypeHints = true,
-- 									includeInlayVariableTypeHints = true,
-- 									includeInlayVariableTypeHintsWhenTypeMatchesName = true,
-- 									includeInlayPropertyDeclarationTypeHints = true,
-- 									includeInlayFunctionLikeReturnTypeHints = true,
-- 									includeInlayEnumMemberValueHints = true,
-- 								},
-- 							},
-- 						},
-- 					})
-- 				end,
--
-- 				["lua_ls"] = function()
-- 					-- configure lua server (with special settings)
-- 					lspconfig["lua_ls"].setup({
-- 						capabilities = capabilities,
-- 						settings = {
-- 							Lua = {
-- 								-- make the language server recognize "vim" global
-- 								diagnostics = {
-- 									globals = { "vim" },
-- 								},
-- 								completion = {
-- 									callSnippet = "Replace",
-- 								},
-- 							},
-- 						},
-- 					})
-- 				end,
--
-- 				-- ["asm_lsp"] = function()
-- 				-- 	lspconfig["asm_lsp"].setup({
-- 				-- 		-- command = "asm-lsp",
-- 				-- 		filetypes = {
-- 				-- 			"asm",
-- 				-- 		},
-- 				-- 	})
-- 				-- end,
-- 			},
-- 		})
-- 	end,
-- }
